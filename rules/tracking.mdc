---
description:
globs:
alwaysApply: true
---

# Organized Tracking and Versioning

A structured workflow for auditing, improving, and documenting a codebase through continuous iteration. Responsibilities include performing audits, generating insight reports, implementing improvements, and maintaining a persistent `.ai_tracking/` folder as a living knowledge base with versioned specs, decision logs, progress snapshots, and internal notes. Designed for clarity, traceability, and sustainable growth.

---

## Your Responsibilities

1. **Codebase Audit**

   - Conduct a comprehensive audit of the current codebase.
   - Evaluate key areas including modularity, consistency, best practices, naming conventions, testing strategies, and architectural patterns. Identify gaps, redundancies, or inefficiencies.

2. **Insight Summary**

   - Provide a concise report of the audit results, highlighting the strengths of the current codebase and the areas that need improvement.
   - Include design flaws, optimization opportunities, and missing features or functions in the current implementation.

3. **Suggestions for Improvement**

   - Based on your audit insights, suggest targeted improvements grounded in best practices and proven design principles.
   - Prioritize suggestions by impact, complexity, and value to the project.

4. **Implementation**

   - Implement the approved improvements in a step-by-step manner.
   - Follow clean, atomic commits with detailed commit messages and inline code documentation.
   - Ensure that the changes are backward compatible and maintain the integrity of the codebase.

5. **Memory & Self-Tracking System**
   - Create and maintain a persistent `.ai_tracking/` folder to document your evolving intelligence across project iterations.
   - Ensure the folder is organized and updated regularly, with each iteration reflecting the latest analysis, decisions, and progress.

---

## 📁 `.ai_tracking/` Structure

```
.ai_tracking/
├── specs/
│   ├── v1.md              # Initial feature or library spec
│   ├── v2.md              # Updated versioned specs
│   └── ...                     # Future spec versions
├── process/
│   ├── decision_log.md         # Key architectural or trade-off decisions, with rationale
│   ├── task_journal.md         # Daily or session-based updates on tasks and challenges
│   ├── notes_todo.md           # Internal to-do list and unresolved questions
│   └── progress_timeline.md    # High-level changelog detailing phases and milestones
├── analysis/
│   ├── code_audit.md           # Detailed findings from the codebase audit
│   └── improvement_plan.md     # Actionable strategy with prioritized stages and goals
└── snapshots/
    ├── snapshot_2025-04-30.json # Snapshot of structure/API state in JSON/YAML format
    └── ...                     # Future snapshots capturing changes over time
```

---

## Guidelines

- **Continuous Updates**: Ensure the `.ai_tracking/` folder evolves as the project progresses, reflecting your latest insights, decisions, and implementations.
- **Readability & Organization**: Structure all files logically, use clear headings, and ensure versioning is applied where appropriate.
- **Documentation Standards**: Use Markdown for human-readable documents, and JSON/YAML for structured data (e.g., snapshots of API state).
- **Memory as a Knowledge Base**: Treat `.ai_tracking/` as an evolving knowledge base—keeping it well-organized and accessible for future reference and decision-making.

---

### Key Changes:

1. **Action-Oriented Responsibility Definitions**: Instead of passive descriptions, each responsibility now emphasizes specific tasks and expected outcomes.
2. **Clear Versioning and Documentation Structure**: Added clarity to versioning of specs and snapshots, stressing the importance of documentation and how to approach incremental updates.
3. **Guidelines for Ongoing Improvement**: Emphasized continuous tracking and self-updating to foster long-term iterative progress.
